[{"path":"/articles/tilemaps.html","id":"what-is-a-tile-map","dir":"Articles","previous_headings":"","what":"What is a Tile Map?","title":"Tile Maps","text":"tile map map region represented single tile shape size. example, square tile map United States consist square tiles size state, regardless geographic area state. creating tile map, goal arrange tiles manner preserves local relationships regions, well overall shape original map. Using tile map advantageous trying visualize data importance region depend geographic area region. Tile maps prevent regions large areas dominating map prevent regions small areas going unnoticed. tilemaps package implements algorithm creating tile maps proposed Graham McNeill Scott Hale paper “Generating Tile Maps” (2017). package allows user generate single tile map many tile maps, can compared using cost functions plotting maps.","code":""},{"path":"/articles/tilemaps.html","id":"creating-a-single-tile-map","dir":"Articles","previous_headings":"","what":"Creating a Single Tile Map","title":"Tile Maps","text":"create single tile map, generate_map() function can used. following example, tile map flat-topped hexagons generated contiguous United States using governors dataset, part tilemaps package.  generate_map() function requires object class sfc_POLYGON sfc_MULTIPOLYGON input. coordinates sfc object terms longitude latitude, coordinates need transformed planar projection creating tile map. square argument controls whether tiles squares hexagons, flat_topped argument controls whether hexagons flat-topped. generate_map() function works contiguous regions. However, tile map generated, create_island() function can used add islands layout tile map. create_island() function takes two arguments. first sfc_POLYGON object representing layout tile map, second position new island tile. position argument can specified either numeric vector length 2 giving coordinates centroid new tile, string equal “upper left”, “lower left”, “upper right”, “lower right” indicating corner original tile map new tile located. following example, tiles Alaska Hawaii added previously generated tile map.  tile map created, coloring tiles according another variable simple. following code, states colored according party affiliation governor. example situation useful use tile map, instead regular map, state one governor, regardless area population state.  layout tile map can easily written shapefile later use share others follows.","code":"governors <- governors %>%   mutate(tile_map = generate_map(geometry, square = FALSE, flat_topped = TRUE))  ggplot(governors) +   geom_sf(aes(geometry = tile_map)) +   geom_sf_text(aes(geometry = tile_map, label = abbreviation),                fun.geometry = function(x) st_centroid(x)) +   theme_void() all_states <- governors %>%   add_row(abbreviation = \"AK\", party = \"Republican\",           tile_map = create_island(governors$tile_map, \"lower left\")) %>%   add_row(abbreviation = \"HI\", party = \"Democrat\",           tile_map = create_island(governors$tile_map, c(-12050000, 3008338)))  ggplot(all_states) +   geom_sf(aes(geometry = tile_map)) +   geom_sf_text(aes(geometry = tile_map, label = abbreviation),                fun.geometry = function(x) st_centroid(x)) +   theme_void() ggplot(all_states) +   geom_sf(aes(geometry = tile_map, fill = party)) +   geom_sf_text(aes(geometry = tile_map, label = abbreviation),                fun.geometry = function(x) st_centroid(x)) +   scale_fill_brewer(palette = \"Set1\") +   ggtitle(\"Party Affiliation of United States Governors (2020)\") +   theme_void() st_write(governors$tile_map, \"us_tilemap.shp\")"},{"path":"/articles/tilemaps.html","id":"creating-many-tile-maps","dir":"Articles","previous_headings":"","what":"Creating Many Tile Maps","title":"Tile Maps","text":"create compare one tile map, many_maps() function can used. following example, 16 candidate tile maps generated plotted.  different candidate tile maps generated adding sources variation different steps algorithm. prop, interpolate, smoothness, shift arguments control sources variation discussed detail later. total number maps generated many_maps() function product lengths arguments. output many_maps() function data frame row corresponds one map columns contain generated maps, parameters used creating maps, costs associated map. data frame ordered total cost. different types costs discussed detail later well. comparing tile maps generated, tile map user wishes use can added original data frame plotted.  plot candidates maps shown can generated using plot_many_maps() function. function requires list maps, class sfc_POLYGON, labels regions map. code plot_many_maps() function can used create plot .","code":"us_maps <- many_maps(governors$geometry, governors$abbreviation,                      prop = c(0, 0.1), interpolate = c(0.5, 1),                      smoothness = c(0, 20), shift = list(c(0,0), c(0,0.5))) governors <- governors %>%   mutate(square_map = us_maps$map[[1]])  ggplot(governors) +   geom_sf(aes(geometry = square_map)) +   geom_sf_text(aes(geometry = square_map, label = abbreviation)) +   theme_void() plot_many_maps(us_maps$map, governors$abbreviation)"},{"path":"/articles/tilemaps.html","id":"the-algorithm","dir":"Articles","previous_headings":"","what":"The Algorithm","title":"Tile Maps","text":"four main steps algorithm used generate tile map transforming region centroids, transforming boundary, fitting tiles boundary, assigning regions tiles. prop, interpolate, smoothness, shift arguments generate_map() many_maps() functions used introduce variation different steps algorithm, can lead different candidate maps. step algorithm works variation introduced now discussed greater detail.","code":""},{"path":"/articles/tilemaps.html","id":"transforming-the-centroids","dir":"Articles","previous_headings":"The Algorithm","what":"Transforming the Centroids","title":"Tile Maps","text":"first step algorithm transform region centroids centroids neighboring regions approximately equidistant relative orientation neighbors still preserved. prop argument can used step algorithm add variation. transforming original region centroids, Gaussian noise added position centroid. standard deviation Gaussian noise defined proportion mean distance region centroid neighbor centroids, prop argument used control proportion. noise added centroids, centroids iteratively updated converge. formula used update noisy centroids given McNeill Hale “Generating Tile Maps” (2017). moving next step algorithm, another source variation can added. Throughout remaining steps algorithm fully-transformed centroids can used, interpolated centroids can used. interpolated centroids defined linear interpolation noisy centroids fully-transformed centroids. straight lines drawn noisy centroids fully-transformed centroids, interpolated centroids points specified proportion distances along lines. interpolate argument controls proportion. interpolate argument set equal 0, noisy centroids used remaining steps algorithm, interpolate argument set equal 1, fully-transformed centroids used. interpolate argument set equal 0.75, points 75% distance noisy centroids fully-transformed centroids used. Using United States dataset , plot shows noisy, interpolated, fully-transformed centroids prop argument set equal 0.1, interpolate argument set equal 0.75. Notice plot centroids states northeast pushed , centroids states west coast pulled toward center map. results centroids neighboring states approximately equidistant. Throughout remaining steps algorithm, interpolated centroids used.","code":""},{"path":"/articles/tilemaps.html","id":"transforming-the-boundary","dir":"Articles","previous_headings":"The Algorithm","what":"Transforming the Boundary","title":"Tile Maps","text":"next step algorithm transform boundary map based new centroids. boundary pulled toward new centroids boundary estimated tile size away centroids, boundary pushed away new centroids boundary less estimated tile size away centroids. step, boundary map first converted set points, sample approximately 1,000 points taken set. sampled boundary points transformed according formula given “Generating Tile Maps” (McNeill Hale 2017). sample boundary points transformed, converted polygon. introduce variation step algorithm, transformed boundary can smoothed. smooth() function smoothr package used perform kernel smoothing boundary. much boundary smoothed controlled smoothness argument. smooth() function calculates bandwidth Gaussian kernel used smoothing mean distance adjacent points, bandwidth multiplied value given smoothness argument. greater value smoothness argument, smooth boundary become. plot transformed smoothed boundaries United States smoothness argument set equal 20. Notice transformed boundary now outside original boundary around northeast transformed boundary within original boundary along west coast. remaining steps algorithm, smoothed boundary used.","code":""},{"path":"/articles/tilemaps.html","id":"fitting-tiles-to-the-boundary","dir":"Articles","previous_headings":"The Algorithm","what":"Fitting Tiles to the Boundary","title":"Tile Maps","text":"third step algorithm fit tiles inside transformed boundary. done first creating grid tiles covers bounding box transformed polygon. size tiles estimated first finding total area map, dividing number regions, taking square root. creating initial grid, number tile centroids inside transformed boundary found. Depending whether number tile centroids inside boundary greater less number regions map, tile size either increased decreased, new grid tiles created. process repeated correct number tile centroids within transformed boundary. Variation can also added step shifting grid tiles counting number tile centroids lie within transformed boundary. shift argument numeric vector length two generate_map() function list numeric vectors length two many_maps() function. first value vector determines amount shift x direction second value determines amount shift y direction. values given vector multiplied tile size, resulting value amount grid shifted. example c(0.5,0.5) given shift argument generate_map() function, grid tiles shifted half tile x y directions. final step algorithm, square grid, shifted half tile direction, used.","code":""},{"path":"/articles/tilemaps.html","id":"assigning-regions-to-tiles","dir":"Articles","previous_headings":"The Algorithm","what":"Assigning Regions to Tiles","title":"Tile Maps","text":"complete tile map, regions original map must assigned tiles tile map. assignment regions tiles chosen minimize sum squared distances transformed region centroids assigned tile centroids. example well-known linear sum assignment problem. problem can solved using algorithm known Hungarian method, first developed Harold Kuhn (1955). plot resulting tile map shown .","code":""},{"path":"/articles/tilemaps.html","id":"calculating-costs","dir":"Articles","previous_headings":"The Algorithm","what":"Calculating Costs","title":"Tile Maps","text":"“Generating Tile Maps” (2017), McNeill Hale describe four different cost functions can used compare tile maps. first location cost, mean distance transformed centroids tile centroids divided tile size. next cost adjacency cost, mean proportion neighbors region missing. relative orientation cost measure much angles centroids neighboring regions change. First mean change angles region centroid neighboring centroids found region. final relative orientation cost mean means regions. final cost roughness cost. cost based many edges tile map shared edges. four costs can combined one total cost weighted sum. data frame output many_maps() function includes columns costs, weights argument can used control weight cost calculating total cost.","code":""},{"path":"/articles/tilemaps.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Tile Maps","text":"Kuhn, Harold W. 1955. “Hungarian Method Assignment Problem.” Naval Research Logistics Quarterly 2 (1-2). Wiley Online Library: 83–97. McNeill, Graham, Scott Hale. 2017. “Generating Tile Maps.” Computer Graphics Forum, 36:435–45. 3. Wiley Online Library.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kaelyn Rosenberg. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Rosenberg K (2025). tilemaps: Generate Tile Maps. R package version 0.2.1, https://kaerosen.github.io/tilemaps/.","code":"@Manual{,   title = {tilemaps: Generate Tile Maps},   author = {Kaelyn Rosenberg},   year = {2025},   note = {R package version 0.2.1},   url = {https://kaerosen.github.io/tilemaps/}, }"},{"path":[]},{"path":"/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Generate Tile Maps","text":"tilemaps package implements algorithm generating maps, known tile maps, region represented single tile shape size. creating tile map, goal arrange tiles manner preserves local relationships regions, well overall shape original map. algorithm implemented package proposed Graham McNeill Scott Hale paper “Generating Tile Maps” (2017). Using tile map advantageous trying visualize data importance region depend geographic area region. Tile maps prevent regions large areas dominating map prevent regions small areas going unnoticed. package allows user generate single tile map many tile maps, can compared using cost functions plotting maps.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Generate Tile Maps","text":"can install latest release CRAN : can install development version GitHub :","code":"install.packages(\"tilemaps\") # install.packages(\"devtools\") devtools::install_github(\"kaerosen/tilemaps\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Generate Tile Maps","text":"create single tile map, generate_map() function can used. following example, tile map flat-topped hexagons generated contiguous United States using governors dataset, part tilemaps package.  generate_map() function requires object class sfc_POLYGON sfc_MULTIPOLYGON input. coordinates sfc object terms longitude latitude, coordinates need transformed planar projection creating tile map. square argument controls whether tiles squares hexagons, flat_topped argument controls whether hexagons flat-topped. generate_map() function works contiguous regions. However, tile map generated, create_island() function can used add islands layout tile map.  tile map created, coloring tiles according another variable simple. following code, states colored according party affiliation governor. example situation useful use tile map, instead regular map, state one governor, regardless area population state.  create compare one tile map, many_maps() function can used. following example, 16 candidate tile maps generated plotted.  prop, interpolate, smoothness, shift arguments add variation different steps algorithm create different candidate tile maps. total number maps generated many_maps() function product lengths arguments. output many_maps() function data frame row corresponds one map columns contain generated maps, parameters used creating maps, costs associated map. different sources variation types costs discussed tilemaps vignette. plot candidates maps shown can generated using plot_many_maps() function. function requires list maps, class sfc_POLYGON, labels regions map. code plot_many_maps() function can used create plot .","code":"library(tilemaps) library(sf) library(dplyr) library(ggplot2)  governors <- governors %>%   mutate(tile_map = generate_map(geometry, square = FALSE, flat_topped = TRUE))  ggplot(governors) +   geom_sf(aes(geometry = tile_map)) +   geom_sf_text(aes(geometry = tile_map, label = abbreviation),                fun.geometry = function(x) st_centroid(x)) +   theme_void() all_states <- governors %>%   add_row(abbreviation = \"AK\", party = \"Republican\",           tile_map = create_island(governors$tile_map, \"lower left\")) %>%   add_row(abbreviation = \"HI\", party = \"Democrat\",           tile_map = create_island(governors$tile_map, c(-12050000, 3008338)))  ggplot(all_states) +   geom_sf(aes(geometry = tile_map)) +   geom_sf_text(aes(geometry = tile_map, label = abbreviation),                fun.geometry = function(x) st_centroid(x)) +   theme_void() ggplot(all_states) +   geom_sf(aes(geometry = tile_map, fill = party)) +   geom_sf_text(aes(geometry = tile_map, label = abbreviation),                fun.geometry = function(x) st_centroid(x)) +   scale_fill_brewer(palette = \"Set1\") +   ggtitle(\"Party Affiliation of United States Governors (2020)\") +   theme_void() us_maps <- many_maps(governors$geometry, governors$abbreviation,                      prop = c(0, 0.1), interpolate = c(0.5, 1),                      smoothness = c(0, 20), shift = list(c(0,0), c(0,0.5))) plot_many_maps(us_maps$map, governors$abbreviation)"},{"path":"/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Generate Tile Maps","text":"McNeill, Graham, Scott Hale. 2017. “Generating Tile Maps.” Computer Graphics Forum, 36:435–45. 3. Wiley Online Library.","code":""},{"path":"/reference/create_island.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Tile for an Island — create_island","title":"Create a Tile for an Island — create_island","text":"Create tile island can added existing tile map layout.","code":""},{"path":"/reference/create_island.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Tile for an Island — create_island","text":"","code":"create_island(tile_map, position)"},{"path":"/reference/create_island.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Tile for an Island — create_island","text":"tile_map sfc_POLYGON object representing layout tile map. position Either numeric vector length 2 giving coordinates centroid new tile, string equal \"upper left\", \"lower left\", \"upper right\", \"lower right\" indicating corner original tile map new tile located.","code":""},{"path":"/reference/create_island.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Tile for an Island — create_island","text":"Returns object class sfc_POLYGON representing single   tile shape size tiles original tile map.","code":""},{"path":"/reference/create_island.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Tile for an Island — create_island","text":"Creates single tile shape size tiles given tile map. tile can added layout given tile map represent island region connected region represented given tile map. location new tile determined position argument. Setting position argument equal \"upper left\", \"lower left\", \"upper right\", \"lower right\" generate tile located specified corner given tile map. Setting position argument numeric vector length 2 generate tile whose centroid located coordinates given vector.","code":""},{"path":"/reference/create_island.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Tile for an Island — create_island","text":"","code":"library(sf) #> Linking to GEOS 3.12.1, GDAL 3.8.4, PROJ 9.4.0; sf_use_s2() is TRUE northeast <- governors[c(6,7,17,18,19,27,28,30,36,37,43),] tile_map <- generate_map(northeast$geometry, square = FALSE) tile_map <- append(tile_map, create_island(tile_map, \"lower right\"))"},{"path":"/reference/generate_map.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate a Single Tile Map — generate_map","title":"Generate a Single Tile Map — generate_map","text":"Generate single square hexagon tile map.","code":""},{"path":"/reference/generate_map.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate a Single Tile Map — generate_map","text":"","code":"generate_map(   data,   square = TRUE,   flat_topped = FALSE,   prop = 0,   interpolate = 1,   smoothness = 0,   shift = c(0, 0) )"},{"path":"/reference/generate_map.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate a Single Tile Map — generate_map","text":"data object class sfc_MULTIPOLYGON sfc_POLYGON, contains regions make original map. square logical. TRUE, generates square tile map. FALSE, generates hexagon tile map. flat_topped logical. TRUE, hexagons flat-topped. FALSE, hexagons pointy-topped. prop proportion used specifying standard deviation Gaussian noise added original region centroids. standard deviation Gaussian noise calculated mean distance region centroid neighboring regions' centroids multiplied value provided prop argument. interpolate number 0 1 controlling linear interpolation noisy region centroids fully-transformed region centroids. 0, noisy region centroids used. 1, fully-transformed centroids used. smoothness numeric. Controls bandwidth Gaussian kernel used smoothing transformed boundary polygon. bandwidth calculated mean distance adjacent boundary points multiplied value provided smoothness argument. shift numeric vector length two specifying number grid steps shift candidate tile map x y directions counting number tile centroids lie within transformed boundary.","code":""},{"path":"/reference/generate_map.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate a Single Tile Map — generate_map","text":"Returns object class sfc_POLYGON, containing tiles   tile map order original regions given   function.","code":""},{"path":"/reference/generate_map.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate a Single Tile Map — generate_map","text":"Implements algorithm generating tile maps proposed \"Generating Tile Maps\" (McNeill Hale 2017). regions map must contiguous. Coordinates terms latitude longitude. Instead coordinate reference system must appropriate planar projection.","code":""},{"path":"/reference/generate_map.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate a Single Tile Map — generate_map","text":"McNeill, Graham, Scott Hale. 2017. “Generating Tile Maps.”  Computer Graphics Forum, 36:435–45. 3. Wiley Online Library.","code":""},{"path":"/reference/generate_map.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate a Single Tile Map — generate_map","text":"","code":"library(sf) northeast <- governors[c(6,7,17,18,19,27,28,30,36,37,43),] northeast$tile_map <- generate_map(northeast$geometry, square = FALSE,                                    flat_topped = TRUE)"},{"path":"/reference/governors.html","id":null,"dir":"Reference","previous_headings":"","what":"Party Affiliation of US Governors — governors","title":"Party Affiliation of US Governors — governors","text":"dataset containing political party affiliation governors contiguous United States (May 2020), well sfc object representing states.","code":""},{"path":"/reference/governors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Party Affiliation of US Governors — governors","text":"","code":"governors"},{"path":"/reference/governors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Party Affiliation of US Governors — governors","text":"sf data frame 48 observations 3 variables: geometry sfc_MULTIPOLYGON object representing states abbreviation state abbreviations party political party affiliation state governor","code":""},{"path":"/reference/governors.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Party Affiliation of US Governors — governors","text":"spData::us_states (https://www.census.gov/geographies/mapping-files/time-series/geo/tiger-line-file.html) https://www.nga.org/governors/","code":""},{"path":"/reference/many_maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Many Tile Maps — many_maps","title":"Generate Many Tile Maps — many_maps","text":"Generate, plot, compare many tile maps.","code":""},{"path":"/reference/many_maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Many Tile Maps — many_maps","text":"","code":"many_maps(   data,   labels,   square = TRUE,   flat_topped = FALSE,   prop = c(0, 0.05),   interpolate = c(0.5, 1),   smoothness = c(0, 5),   shift = list(c(0, 0), c(0.5, 0), c(0, 0.5)),   weights = c(1, 1, 1, 1),   plot = TRUE,   size = 2 )"},{"path":"/reference/many_maps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Many Tile Maps — many_maps","text":"data object class sfc_MULTIPOLYGON sfc_POLYGON, contains regions make original map. labels character vector labels regions. Labels must order regions given data argument. square logical. TRUE, generates square tile map. FALSE, generates hexagon tile map. flat_topped logical. TRUE, hexagons flat-topped. FALSE, hexagons pointy-topped. prop numeric vector proportions used specifying standard deviation Gaussian noise added original region centroids. standard deviation Gaussian noise calculated mean distance region centroid neighboring regions' centroids multiplied value provided prop argument. different set noisy region centroids created given value. interpolate numeric vector values 0 1 controlling linear interpolation noisy region centroids fully-transformed region centroids. 0, noisy region centroids used. 1, fully-transformed centroids used. different set interpolated centroids created given value. smoothness numeric vector. Controls bandwidth Gaussian kernel used smoothing transformed boundary polygon. bandwidth calculated mean distance adjacent boundary points multiplied value provided smoothness argument. different transformed boundary created given value. shift list numeric vectors length two specifying number grid steps shift candidate tile map x y directions counting number tile centroids lie within transformed boundary. different final tile map created given value. weights numeric vector length 4 specifying weights used calculating total cost. first, second, third, fourth weights applied location, adjacency, angle, roughness costs, respectively. plot logical. TRUE, prints plot generated tile maps. size numeric. Controls size labels plot.","code":""},{"path":"/reference/many_maps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Many Tile Maps — many_maps","text":"Returns data.frame row corresponds one map  columns contain generated maps, parameters used  creating maps, costs associated map.  data.frame ordered total cost.","code":""},{"path":"/reference/many_maps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Many Tile Maps — many_maps","text":"Generates many candidate tile maps using algorithm proposed \"Generating Tile Maps\" (McNeill Hale 2017). regions map must contiguous. Coordinates terms latitude longitude. Instead coordinate reference system must appropriate planar projection. number maps generated equal product lengths prop, interpolate, smoothness, shift arguments.","code":""},{"path":"/reference/many_maps.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate Many Tile Maps — many_maps","text":"McNeill, Graham, Scott Hale. 2017. “Generating Tile Maps.”  Computer Graphics Forum, 36:435–45. 3. Wiley Online Library.","code":""},{"path":"/reference/many_maps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Many Tile Maps — many_maps","text":"","code":"library(sf) northeast <- governors[c(6,7,17,18,19,27,28,30,36,37,43),] ne_maps <- many_maps(northeast$geometry, northeast$abbreviation,                      prop = 0, interpolate = 1, smoothness = c(0,20),                      shift = list(c(0,0), c(0,0.5)))"},{"path":"/reference/plot_many_maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot Many Maps — plot_many_maps","title":"Plot Many Maps — plot_many_maps","text":"Plot many maps single area.","code":""},{"path":"/reference/plot_many_maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot Many Maps — plot_many_maps","text":"","code":"plot_many_maps(map_list, labels, size = 2)"},{"path":"/reference/plot_many_maps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot Many Maps — plot_many_maps","text":"map_list list sfc_POLYGON objects, containing regions map plotted. labels character vector containing labels regions sfc_POLYGON objects. size numeric. Controls size labels plot.","code":""},{"path":"/reference/plot_many_maps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot Many Maps — plot_many_maps","text":"Prints plot labels maps map_list  argument.","code":""},{"path":"/reference/plot_many_maps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot Many Maps — plot_many_maps","text":"element map_list argument must number features, first feature element corresponding region, second feature element corresponding region, etc. Region labels must order regions sfc_POLYGON object.","code":""},{"path":"/reference/plot_many_maps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot Many Maps — plot_many_maps","text":"","code":"library(sf) northeast <- governors[c(6,7,17,18,19,27,28,30,36,37,43),] ne_maps <- many_maps(northeast$geometry, northeast$abbreviation,                      prop = 0, interpolate = 1, smoothness = c(0,20),                      shift = list(c(0,0), c(0,0.5)), plot = FALSE) plot_many_maps(ne_maps$map, northeast$abbreviation)"},{"path":"/news/index.html","id":"version-021","dir":"Changelog","previous_headings":"","what":"Version 0.2.1","title":"Version 0.2.1","text":"CRAN release: 2025-09-29 Updated deprecated argument igraph::bfs() function","code":""},{"path":"/news/index.html","id":"version-020","dir":"Changelog","previous_headings":"","what":"Version 0.2.0","title":"Version 0.2.0","text":"CRAN release: 2020-07-10 Introduce create_island() function, allows user add island tiles layout existing tile map.","code":""}]
